// Mixins.

@mixin nl {
    margin: 0;
    padding: 0;
    text-indent: 0;
    list-style: none;
    list-style-position: outside;
}

@mixin cf {
    &:before,
    &:after {
        display: table;
        content: "";
    }

    &:after {
        clear: both;
    }

    
}

@mixin blocks-justify {
    text-align: justify;
    text-justify: newspaper;
}

// You can add your own mixins here:



/// Creates a menu icon with a set width, height, number of bars, and colors. The mixin uses the height of the icon and the weight of the bars to determine spacing. <div class="docs-example-burger"></div>
///
/// @param {Color} $color [$black] - Color to use for the icon.
/// @param {Color} $color-hover [$dark-gray] - Color to use when the icon is hovered over.
/// @param {Number} $width [20px] - Width of the icon.
/// @param {Number} $height [16px] - Height of the icon.
/// @param {Number} $weight [2px] - Height of individual bars in the icon.
/// @param {Number} $bars [3] - Number of bars in the icon.

@mixin hamburger(
  $color: $black,
  $color-hover: $red,
  $width: 20px,
  $height: 16px,
  $weight: 2px,
  $bars: 3
) {
  // box-shadow CSS output
  $shadow: ();
  $hover-shadow: ();

  // Spacing between bars is calculated based on the total height of the icon and the weight of each bar
  $spacing: floor(($height - ($weight * $bars)) / ($bars - 1));

  // Icon container
  position: relative;
  display: inline-block;
  vertical-align: middle;
  cursor: pointer;
  width: $width;
  height: $height;

  // Icon bars
  &::after {
    content: '';
    position: absolute;
    display: block;
    width: 100%;
    height: $weight;
    background: $color;
    top: 0;
    left: 0;

    @for $i from 2 through $bars {
      $offset: ($weight + $spacing) * ($i - 1);
      $shadow: append($shadow, 0 $offset 0 $color, comma);
    }

    box-shadow: $shadow;
  }

  // Hover state
  @if $color-hover {
    // Generate CSS
    @for $i from 2 through $bars {
      $offset: ($weight + $spacing) * ($i - 1);
      $hover-shadow: append($hover-shadow, 0 $offset 0 $color-hover, comma);
    }

    &:hover::after {
      background: $color-hover;
      box-shadow: $hover-shadow;
    }
  }
}


@mixin cross(
  $bg-color: $black, 
  $bg-color-hover: null,
  $width: 30px, 
  $height: 30px, 
  $weight: 3px
){
  
  // Icon container
  position: relative;
  display: inline-block;
  vertical-align: middle;
  cursor: pointer;
  width: $width;
  height: $height;
  
  // Icon bars
  &::after, &::before {
    content: '';
    position: absolute;
    display: block;
    width: 100%;
    height: $weight;
    background: $bg-color;
    top: 0;
    left: 0;
    margin-top: calc(50% - #{$weight});
  }
  
  &::before { transform: rotate(-45deg); }
  &::after  { transform: rotate(45deg);  }

  @if $bg-color-hover{
    &:hover{
      &::before, &::after{
        background-color: $bg-color-hover;
      }
    }
  }
}


/// Makes an element visually hidden, but still accessible to keyboards and assistive devices.
/// @link http://snook.ca/archives/html_and_css/hiding-content-for-accessibility Hiding Content for Accessibility
@mixin element-invisible {
  position: absolute !important;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
}

/// Reverses the CSS output created by the `element-invisible()` mixin.
@mixin element-invisible-off {
  position: static !important;
  height: auto;
  width: auto;
  overflow: visible;
  clip: auto;
}


/// Horizontally centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin horizontal-center {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

/// Absolutely centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}


// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
    $src: null;

    $extmods: (
        eot: "?",
        svg: "#" + str-replace($name, " ", "_")
    );

    $formats: (
        otf: "opentype",
        ttf: "truetype"
    );

    @each $ext in $exts {
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }

    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
    }
}

@mixin abs-size{

  position: absolute;
  top:0;left:0;right:0;bottom:0;
}



// @mixin desktop { @media screen and (min-width: 1200px) {@content;} }
// @mixin laptop { @media screen and (min-width: 992px) {@content;} }
// @mixin tablet { @media screen and (min-width: 768px) {@content;} }
// @mixin phone { @media screen and (min-width: 480px) {@content;} }